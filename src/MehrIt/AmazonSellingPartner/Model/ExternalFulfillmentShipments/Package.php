<?php
/**
 * Package
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MehrIt\AmazonSellingPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * This section provides APIs for selling partners to work with Amazon External Fulfillment shipments management/processing services.
 *
 * The version of the OpenAPI document: 2021-01-06
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments;

use \ArrayAccess;
use \MehrIt\AmazonSellingPartner\ObjectSerializer;
use \MehrIt\AmazonSellingPartner\ModelInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Package implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Package';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'id' => 'string',
        'dimensions' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\PackageDimensions',
        'weight' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Weight',
        'hazmat_labels' => 'string[]',
        'package_line_items' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\PackagePackageLineItems[]',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'dimensions' => null,
        'weight' => null,
        'hazmat_labels' => null,
        'package_line_items' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'dimensions' => 'dimensions',
        'weight' => 'weight',
        'hazmat_labels' => 'hazmatLabels',
        'package_line_items' => 'packageLineItems',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'id' => 'setId',
        'dimensions' => 'setDimensions',
        'weight' => 'setWeight',
        'hazmat_labels' => 'setHazmatLabels',
        'package_line_items' => 'setPackageLineItems',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'id' => 'getId',
        'dimensions' => 'getDimensions',
        'weight' => 'getWeight',
        'hazmat_labels' => 'getHazmatLabels',
        'package_line_items' => 'getPackageLineItems',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    const STATUS_CREATED = 'CREATED';
    const STATUS_PICKUP_SLOT_RETRIEVED = 'PICKUP_SLOT_RETRIEVED';
    const STATUS_INVOICE_GENERATED = 'INVOICE_GENERATED';
    const STATUS_SHIPLABEL_GENERATED = 'SHIPLABEL_GENERATED';
    const STATUS_SHIPPED = 'SHIPPED';
    const STATUS_DELIVERED = 'DELIVERED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues() : array
    {
        return [
            self::STATUS_CREATED,
            self::STATUS_PICKUP_SLOT_RETRIEVED,
            self::STATUS_INVOICE_GENERATED,
            self::STATUS_SHIPLABEL_GENERATED,
            self::STATUS_SHIPPED,
            self::STATUS_DELIVERED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['hazmat_labels'] = $data['hazmat_labels'] ?? null;
        $this->container['package_line_items'] = $data['package_line_items'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['dimensions'] === null) {
            $invalidProperties[] = "'dimensions' can't be null";
        }
        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if (!is_null($this->container['hazmat_labels']) && (count($this->container['hazmat_labels']) < 0)) {
            $invalidProperties[] = "invalid value for 'hazmat_labels', number of items must be greater than or equal to 0.";
        }

        if ($this->container['package_line_items'] === null) {
            $invalidProperties[] = "'package_line_items' can't be null";
        }
        if ((count($this->container['package_line_items']) < 1)) {
            $invalidProperties[] = "invalid value for 'package_line_items', number of items must be greater than or equal to 1.";
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id An id provided by callers of the API that uniquely identifies a package within the scope a shipment.
     *
     * @return self
     */
    public function setId($id) : self
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\PackageDimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\PackageDimensions $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions) : self
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Weight $weight weight
     *
     * @return self
     */
    public function setWeight($weight) : self
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets hazmat_labels
     *
     * @return string[]|null
     */
    public function getHazmatLabels()
    {
        return $this->container['hazmat_labels'];
    }

    /**
     * Sets hazmat_labels
     *
     * @param string[]|null $hazmat_labels The optional list of Hazmat labels applied on the package.
     *
     * @return self
     */
    public function setHazmatLabels($hazmat_labels) : self
    {


        if (!is_null($hazmat_labels) && (count($hazmat_labels) < 0)) {
            throw new \InvalidArgumentException('invalid length for $hazmat_labels when calling Package., number of items must be greater than or equal to 0.');
        }
        $this->container['hazmat_labels'] = $hazmat_labels;

        return $this;
    }

    /**
     * Gets package_line_items
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\PackagePackageLineItems[]
     */
    public function getPackageLineItems()
    {
        return $this->container['package_line_items'];
    }

    /**
     * Sets package_line_items
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\PackagePackageLineItems[] $package_line_items The shipment's line items (or a sub-set of them) that are packed into a package.
     *
     * @return self
     */
    public function setPackageLineItems($package_line_items) : self
    {


        if ((count($package_line_items) < 1)) {
            throw new \InvalidArgumentException('invalid length for $package_line_items when calling Package., number of items must be greater than or equal to 1.');
        }
        $this->container['package_line_items'] = $package_line_items;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status The current status of the package.
     *
     * @return self
     */
    public function setStatus($status) : self
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
