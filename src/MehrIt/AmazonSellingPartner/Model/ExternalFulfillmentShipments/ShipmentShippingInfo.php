<?php
/**
 * ShipmentShippingInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MehrIt\AmazonSellingPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * This section provides APIs for selling partners to work with Amazon External Fulfillment shipments management/processing services.
 *
 * The version of the OpenAPI document: 2021-01-06
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments;

use \ArrayAccess;
use \MehrIt\AmazonSellingPartner\ObjectSerializer;
use \MehrIt\AmazonSellingPartner\ModelInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ShipmentShippingInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Shipment_shippingInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'recommended_ship_method' => 'string',
        'expected_shipping_date_time' => 'string',
        'ship_to_address' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Address',
        'shipping_type' => 'string',
        'recommended_packages' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentShippingInfoRecommendedPackages[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'recommended_ship_method' => null,
        'expected_shipping_date_time' => null,
        'ship_to_address' => null,
        'shipping_type' => null,
        'recommended_packages' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'recommended_ship_method' => 'recommendedShipMethod',
        'expected_shipping_date_time' => 'expectedShippingDateTime',
        'ship_to_address' => 'shipToAddress',
        'shipping_type' => 'shippingType',
        'recommended_packages' => 'recommendedPackages'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'recommended_ship_method' => 'setRecommendedShipMethod',
        'expected_shipping_date_time' => 'setExpectedShippingDateTime',
        'ship_to_address' => 'setShipToAddress',
        'shipping_type' => 'setShippingType',
        'recommended_packages' => 'setRecommendedPackages'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'recommended_ship_method' => 'getRecommendedShipMethod',
        'expected_shipping_date_time' => 'getExpectedShippingDateTime',
        'ship_to_address' => 'getShipToAddress',
        'shipping_type' => 'getShippingType',
        'recommended_packages' => 'getRecommendedPackages'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    const SHIPPING_TYPE_MARKETPLACE = 'MARKETPLACE';
    const SHIPPING_TYPE_SELF = 'SELF';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingTypeAllowableValues() : array
    {
        return [
            self::SHIPPING_TYPE_MARKETPLACE,
            self::SHIPPING_TYPE_SELF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recommended_ship_method'] = $data['recommended_ship_method'] ?? null;
        $this->container['expected_shipping_date_time'] = $data['expected_shipping_date_time'] ?? null;
        $this->container['ship_to_address'] = $data['ship_to_address'] ?? null;
        $this->container['shipping_type'] = $data['shipping_type'] ?? null;
        $this->container['recommended_packages'] = $data['recommended_packages'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['expected_shipping_date_time'] === null) {
            $invalidProperties[] = "'expected_shipping_date_time' can't be null";
        }
        $allowedValues = $this->getShippingTypeAllowableValues();
        if (!is_null($this->container['shipping_type']) && !in_array($this->container['shipping_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipping_type', must be one of '%s'",
                $this->container['shipping_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['recommended_packages']) && (count($this->container['recommended_packages']) < 1)) {
            $invalidProperties[] = "invalid value for 'recommended_packages', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recommended_ship_method
     *
     * @return string|null
     */
    public function getRecommendedShipMethod()
    {
        return $this->container['recommended_ship_method'];
    }

    /**
     * Sets recommended_ship_method
     *
     * @param string|null $recommended_ship_method The ship method assigned by Amazon Fulfillment Network for the packages in this shipment.
     *
     * @return self
     */
    public function setRecommendedShipMethod($recommended_ship_method) : self
    {
        $this->container['recommended_ship_method'] = $recommended_ship_method;

        return $this;
    }

    /**
     * Gets expected_shipping_date_time
     *
     * @return string
     */
    public function getExpectedShippingDateTime()
    {
        return $this->container['expected_shipping_date_time'];
    }

    /**
     * Sets expected_shipping_date_time
     *
     * @param string $expected_shipping_date_time A date and time in the rfc3339 format.
     *
     * @return self
     */
    public function setExpectedShippingDateTime($expected_shipping_date_time) : self
    {
        $this->container['expected_shipping_date_time'] = $expected_shipping_date_time;

        return $this;
    }

    /**
     * Gets ship_to_address
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Address|null
     */
    public function getShipToAddress()
    {
        return $this->container['ship_to_address'];
    }

    /**
     * Sets ship_to_address
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Address|null $ship_to_address ship_to_address
     *
     * @return self
     */
    public function setShipToAddress($ship_to_address) : self
    {
        $this->container['ship_to_address'] = $ship_to_address;

        return $this;
    }

    /**
     * Gets shipping_type
     *
     * @return string|null
     */
    public function getShippingType()
    {
        return $this->container['shipping_type'];
    }

    /**
     * Sets shipping_type
     *
     * @param string|null $shipping_type The type of shipping that seller will use to deliver a customer order.
     *
     * @return self
     */
    public function setShippingType($shipping_type) : self
    {
        $allowedValues = $this->getShippingTypeAllowableValues();
        if (!is_null($shipping_type) && !in_array($shipping_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipping_type', must be one of '%s'",
                    $shipping_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_type'] = $shipping_type;

        return $this;
    }

    /**
     * Gets recommended_packages
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentShippingInfoRecommendedPackages[]|null
     */
    public function getRecommendedPackages()
    {
        return $this->container['recommended_packages'];
    }

    /**
     * Sets recommended_packages
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentShippingInfoRecommendedPackages[]|null $recommended_packages Recommendations for packages in an order.
     *
     * @return self
     */
    public function setRecommendedPackages($recommended_packages) : self
    {


        if (!is_null($recommended_packages) && (count($recommended_packages) < 1)) {
            throw new \InvalidArgumentException('invalid length for $recommended_packages when calling ShipmentShippingInfo., number of items must be greater than or equal to 1.');
        }
        $this->container['recommended_packages'] = $recommended_packages;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
