<?php
/**
 * ShipmentMetadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MehrIt\AmazonSellingPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * This section provides APIs for selling partners to work with Amazon External Fulfillment shipments management/processing services.
 *
 * The version of the OpenAPI document: 2021-01-06
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments;

use \ArrayAccess;
use \MehrIt\AmazonSellingPartner\ObjectSerializer;
use \MehrIt\AmazonSellingPartner\ModelInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ShipmentMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Shipment_metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'shipment_type' => 'string',
        'original_shipment_info' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataOriginalShipmentInfo',
        'number_of_units' => 'int',
        'priority' => 'bool',
        'invoice_information' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataInvoiceInformation',
        'adapter_app' => '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataAdapterApp',
        'buyer_order_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'shipment_type' => null,
        'original_shipment_info' => null,
        'number_of_units' => 'int32',
        'priority' => null,
        'invoice_information' => null,
        'adapter_app' => null,
        'buyer_order_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'shipment_type' => 'shipmentType',
        'original_shipment_info' => 'originalShipmentInfo',
        'number_of_units' => 'numberOfUnits',
        'priority' => 'priority',
        'invoice_information' => 'invoiceInformation',
        'adapter_app' => 'adapterApp',
        'buyer_order_id' => 'buyerOrderId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'shipment_type' => 'setShipmentType',
        'original_shipment_info' => 'setOriginalShipmentInfo',
        'number_of_units' => 'setNumberOfUnits',
        'priority' => 'setPriority',
        'invoice_information' => 'setInvoiceInformation',
        'adapter_app' => 'setAdapterApp',
        'buyer_order_id' => 'setBuyerOrderId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'shipment_type' => 'getShipmentType',
        'original_shipment_info' => 'getOriginalShipmentInfo',
        'number_of_units' => 'getNumberOfUnits',
        'priority' => 'getPriority',
        'invoice_information' => 'getInvoiceInformation',
        'adapter_app' => 'getAdapterApp',
        'buyer_order_id' => 'getBuyerOrderId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    const SHIPMENT_TYPE__NEW = 'NEW';
    const SHIPMENT_TYPE_EXCHANGE = 'EXCHANGE';
    const SHIPMENT_TYPE_REPLACEMENT = 'REPLACEMENT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShipmentTypeAllowableValues() : array
    {
        return [
            self::SHIPMENT_TYPE__NEW,
            self::SHIPMENT_TYPE_EXCHANGE,
            self::SHIPMENT_TYPE_REPLACEMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipment_type'] = $data['shipment_type'] ?? null;
        $this->container['original_shipment_info'] = $data['original_shipment_info'] ?? null;
        $this->container['number_of_units'] = $data['number_of_units'] ?? null;
        $this->container['priority'] = $data['priority'] ?? null;
        $this->container['invoice_information'] = $data['invoice_information'] ?? null;
        $this->container['adapter_app'] = $data['adapter_app'] ?? null;
        $this->container['buyer_order_id'] = $data['buyer_order_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($this->container['shipment_type']) && !in_array($this->container['shipment_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'shipment_type', must be one of '%s'",
                $this->container['shipment_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['number_of_units'] === null) {
            $invalidProperties[] = "'number_of_units' can't be null";
        }
        if (($this->container['number_of_units'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_units', must be bigger than or equal to 1.";
        }

        if ($this->container['priority'] === null) {
            $invalidProperties[] = "'priority' can't be null";
        }
        if ($this->container['buyer_order_id'] === null) {
            $invalidProperties[] = "'buyer_order_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipment_type
     *
     * @return string|null
     */
    public function getShipmentType()
    {
        return $this->container['shipment_type'];
    }

    /**
     * Sets shipment_type
     *
     * @param string|null $shipment_type Contains the shipment type. * \"REPLACEMENT\" when replacing shipment's SKUs are same as the original shipment * \"EXCHANGE\" when replacing shipment's SKUs are different from original shipment. * \"NEW\" when it's a new shipment.
     *
     * @return self
     */
    public function setShipmentType($shipment_type) : self
    {
        $allowedValues = $this->getShipmentTypeAllowableValues();
        if (!is_null($shipment_type) && !in_array($shipment_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'shipment_type', must be one of '%s'",
                    $shipment_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipment_type'] = $shipment_type;

        return $this;
    }

    /**
     * Gets original_shipment_info
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataOriginalShipmentInfo|null
     */
    public function getOriginalShipmentInfo()
    {
        return $this->container['original_shipment_info'];
    }

    /**
     * Sets original_shipment_info
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataOriginalShipmentInfo|null $original_shipment_info original_shipment_info
     *
     * @return self
     */
    public function setOriginalShipmentInfo($original_shipment_info) : self
    {
        $this->container['original_shipment_info'] = $original_shipment_info;

        return $this;
    }

    /**
     * Gets number_of_units
     *
     * @return int
     */
    public function getNumberOfUnits()
    {
        return $this->container['number_of_units'];
    }

    /**
     * Sets number_of_units
     *
     * @param int $number_of_units Total number of units in the shipment.
     *
     * @return self
     */
    public function setNumberOfUnits($number_of_units) : self
    {

        if (($number_of_units < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_units when calling ShipmentMetadata., must be bigger than or equal to 1.');
        }

        $this->container['number_of_units'] = $number_of_units;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return bool
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param bool $priority Indicates if the shipment is an Amazon Prime shipment or not.
     *
     * @return self
     */
    public function setPriority($priority) : self
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets invoice_information
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataInvoiceInformation|null
     */
    public function getInvoiceInformation()
    {
        return $this->container['invoice_information'];
    }

    /**
     * Sets invoice_information
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataInvoiceInformation|null $invoice_information invoice_information
     *
     * @return self
     */
    public function setInvoiceInformation($invoice_information) : self
    {
        $this->container['invoice_information'] = $invoice_information;

        return $this;
    }

    /**
     * Gets adapter_app
     *
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataAdapterApp|null
     */
    public function getAdapterApp()
    {
        return $this->container['adapter_app'];
    }

    /**
     * Sets adapter_app
     *
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentMetadataAdapterApp|null $adapter_app adapter_app
     *
     * @return self
     */
    public function setAdapterApp($adapter_app) : self
    {
        $this->container['adapter_app'] = $adapter_app;

        return $this;
    }

    /**
     * Gets buyer_order_id
     *
     * @return string
     */
    public function getBuyerOrderId()
    {
        return $this->container['buyer_order_id'];
    }

    /**
     * Sets buyer_order_id
     *
     * @param string $buyer_order_id The buyer's order id.
     *
     * @return self
     */
    public function setBuyerOrderId($buyer_order_id) : self
    {
        $this->container['buyer_order_id'] = $buyer_order_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
