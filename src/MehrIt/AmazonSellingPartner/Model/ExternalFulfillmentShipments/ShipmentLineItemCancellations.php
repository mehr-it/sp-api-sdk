<?php
/**
 * ShipmentLineItemCancellations
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MehrIt\AmazonSellingPartner
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Amazon External Fulfillment Shipments Processing
 *
 * This section provides APIs for selling partners to work with Amazon External Fulfillment shipments management/processing services.
 *
 * The version of the OpenAPI document: 2021-01-06
 * Contact: marketplaceapitest@amazon.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments;

use \ArrayAccess;
use \MehrIt\AmazonSellingPartner\ObjectSerializer;
use \MehrIt\AmazonSellingPartner\ModelInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ShipmentLineItemCancellations implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'ShipmentLineItem_cancellations';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'cancelled_quantity' => 'int',
        'cancelled_timestamp' => 'string',
        'cancellation_type' => 'string',
        'cancellation_reason' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'cancelled_quantity' => 'int32',
        'cancelled_timestamp' => null,
        'cancellation_type' => null,
        'cancellation_reason' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'cancelled_quantity' => 'cancelledQuantity',
        'cancelled_timestamp' => 'cancelledTimestamp',
        'cancellation_type' => 'cancellationType',
        'cancellation_reason' => 'cancellationReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'cancelled_quantity' => 'setCancelledQuantity',
        'cancelled_timestamp' => 'setCancelledTimestamp',
        'cancellation_type' => 'setCancellationType',
        'cancellation_reason' => 'setCancellationReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'cancelled_quantity' => 'getCancelledQuantity',
        'cancelled_timestamp' => 'getCancelledTimestamp',
        'cancellation_type' => 'getCancellationType',
        'cancellation_reason' => 'getCancellationReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    const CANCELLATION_TYPE_SELLER_REJECTED = 'SELLER_REJECTED';
    const CANCELLATION_TYPE_MARKETPLACE_CANCELLED = 'MARKETPLACE_CANCELLED';
    const CANCELLATION_TYPE_SYSTEM_CANCELLED = 'SYSTEM_CANCELLED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCancellationTypeAllowableValues() : array
    {
        return [
            self::CANCELLATION_TYPE_SELLER_REJECTED,
            self::CANCELLATION_TYPE_MARKETPLACE_CANCELLED,
            self::CANCELLATION_TYPE_SYSTEM_CANCELLED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cancelled_quantity'] = $data['cancelled_quantity'] ?? null;
        $this->container['cancelled_timestamp'] = $data['cancelled_timestamp'] ?? null;
        $this->container['cancellation_type'] = $data['cancellation_type'] ?? null;
        $this->container['cancellation_reason'] = $data['cancellation_reason'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        $invalidProperties = [];

        if ($this->container['cancelled_quantity'] === null) {
            $invalidProperties[] = "'cancelled_quantity' can't be null";
        }
        if (($this->container['cancelled_quantity'] < 1)) {
            $invalidProperties[] = "invalid value for 'cancelled_quantity', must be bigger than or equal to 1.";
        }

        if ($this->container['cancelled_timestamp'] === null) {
            $invalidProperties[] = "'cancelled_timestamp' can't be null";
        }
        if ($this->container['cancellation_type'] === null) {
            $invalidProperties[] = "'cancellation_type' can't be null";
        }
        $allowedValues = $this->getCancellationTypeAllowableValues();
        if (!is_null($this->container['cancellation_type']) && !in_array($this->container['cancellation_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'cancellation_type', must be one of '%s'",
                $this->container['cancellation_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cancelled_quantity
     *
     * @return int
     */
    public function getCancelledQuantity()
    {
        return $this->container['cancelled_quantity'];
    }

    /**
     * Sets cancelled_quantity
     *
     * @param int $cancelled_quantity The quantity of items of this particular item which have been cancelled.
     *
     * @return self
     */
    public function setCancelledQuantity($cancelled_quantity) : self
    {

        if (($cancelled_quantity < 1)) {
            throw new \InvalidArgumentException('invalid value for $cancelled_quantity when calling ShipmentLineItemCancellations., must be bigger than or equal to 1.');
        }

        $this->container['cancelled_quantity'] = $cancelled_quantity;

        return $this;
    }

    /**
     * Gets cancelled_timestamp
     *
     * @return string
     */
    public function getCancelledTimestamp()
    {
        return $this->container['cancelled_timestamp'];
    }

    /**
     * Sets cancelled_timestamp
     *
     * @param string $cancelled_timestamp A date and time in the rfc3339 format.
     *
     * @return self
     */
    public function setCancelledTimestamp($cancelled_timestamp) : self
    {
        $this->container['cancelled_timestamp'] = $cancelled_timestamp;

        return $this;
    }

    /**
     * Gets cancellation_type
     *
     * @return string
     */
    public function getCancellationType()
    {
        return $this->container['cancellation_type'];
    }

    /**
     * Sets cancellation_type
     *
     * @param string $cancellation_type The type of cancellation of the item in the shipment.
     *
     * @return self
     */
    public function setCancellationType($cancellation_type) : self
    {
        $allowedValues = $this->getCancellationTypeAllowableValues();
        if (!in_array($cancellation_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'cancellation_type', must be one of '%s'",
                    $cancellation_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cancellation_type'] = $cancellation_type;

        return $this;
    }

    /**
     * Gets cancellation_reason
     *
     * @return string|null
     */
    public function getCancellationReason()
    {
        return $this->container['cancellation_reason'];
    }

    /**
     * Sets cancellation_reason
     *
     * @param string|null $cancellation_reason The reason for the cancellation of the shipment
     *
     * @return self
     */
    public function setCancellationReason($cancellation_reason) : self
    {
        $this->container['cancellation_reason'] = $cancellation_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
