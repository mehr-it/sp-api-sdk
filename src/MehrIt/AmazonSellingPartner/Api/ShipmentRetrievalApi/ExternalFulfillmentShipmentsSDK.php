<?php

namespace MehrIt\AmazonSellingPartner\Api\ShipmentRetrievalApi;

use MehrIt\AmazonSellingPartner\AccessToken;
use MehrIt\AmazonSellingPartner\Configuration;
use MehrIt\AmazonSellingPartner\Exception\ApiException;
use MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException;
use MehrIt\AmazonSellingPartner\HttpFactory;
use MehrIt\AmazonSellingPartner\HttpSignatureHeaders;
use MehrIt\AmazonSellingPartner\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Log\LoggerInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 */
final class ExternalFulfillmentShipmentsSDK
{
    public const API_NAME = 'ExternalFulfillmentShipments';

    public const OPERATION_GETSHIPMENT = 'getShipment';

    public const OPERATION_GETSHIPMENT_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}';
    public const OPERATION_GETSHIPMENTS = 'getShipments';

    public const OPERATION_GETSHIPMENTS_PATH = '/externalFulfillment/shipments/2021-01-06/shipments';

    private ClientInterface $client;

    private HttpFactory $httpFactory;

    private Configuration $configuration;

    private LoggerInterface $logger;

    public function __construct(ClientInterface $client, HttpFactory $requestFactory, Configuration $configuration, LoggerInterface $logger)
    {
        $this->client = $client;
        $this->httpFactory = $requestFactory;
        $this->configuration = $configuration;
        $this->logger = $logger;
    }

    /**
     * Operation getShipment
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment to be retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Shipment
     */
    public function getShipment(AccessToken $accessToken, string $region, $shipment_id)
    {
        $request = $this->getShipmentRequest($accessToken, $region, $shipment_id);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'getShipment', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'getShipment')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'getShipment'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'getShipment',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'getShipment', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'getShipment')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'getShipment'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'getShipment',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Shipment',
            []
        );
    }

    /**
     * Create request for operation 'getShipment'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment to be retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function getShipmentRequest(AccessToken $accessToken, string $region, $shipment_id) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getShipment'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getShipments
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $location_id The SmartConnect location identifier for which shipments are to be retrieved (required)
     * @param string $status Retrieves only those shipments which are in the specified status. The most common use-case would be to fetch all new shipments which would be in the ACCEPTED status. Valid values are ACCEPTED, CONFIRMED, PACKAGE_CREATED, PICKUP_SLOT_RETRIEVED, INVOICE_GENERATED, SHIPLABEL_GENERATED, SHIPPED, DELIVERED and CANCELLED. (required)
     * @param string $last_updated_after Shipments whose latest update is after the specified date/time are included in the response. This field should be in the ISO8601 date/time format. (optional)
     * @param string $last_updated_before Shipments whose latest update is before the specified date/time are included in the response. This field should be in the ISO8601 date/time format. (optional)
     * @param int $max_results Specify the number of shipments to be included in the response. (optional)
     * @param string $next_token The nexToken value returned from a previous call to get shipments. Use this to retrieve the next page of shipments. (optional)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentsResponse
     */
    public function getShipments(AccessToken $accessToken, string $region, $location_id, $status, $last_updated_after = null, $last_updated_before = null, $max_results = null, $next_token = null)
    {
        $request = $this->getShipmentsRequest($accessToken, $region, $location_id, $status, $last_updated_after, $last_updated_before, $max_results, $next_token);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'getShipments', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'getShipments')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'getShipments'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'getShipments',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'getShipments', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'getShipments')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'getShipments'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'getShipments',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentsResponse',
            []
        );
    }

    /**
     * Create request for operation 'getShipments'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $location_id The SmartConnect location identifier for which shipments are to be retrieved (required)
     * @param string $status Retrieves only those shipments which are in the specified status. The most common use-case would be to fetch all new shipments which would be in the ACCEPTED status. Valid values are ACCEPTED, CONFIRMED, PACKAGE_CREATED, PICKUP_SLOT_RETRIEVED, INVOICE_GENERATED, SHIPLABEL_GENERATED, SHIPPED, DELIVERED and CANCELLED. (required)
     * @param string $last_updated_after Shipments whose latest update is after the specified date/time are included in the response. This field should be in the ISO8601 date/time format. (optional)
     * @param string $last_updated_before Shipments whose latest update is before the specified date/time are included in the response. This field should be in the ISO8601 date/time format. (optional)
     * @param int $max_results Specify the number of shipments to be included in the response. (optional)
     * @param string $next_token The nexToken value returned from a previous call to get shipments. Use this to retrieve the next page of shipments. (optional)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function getShipmentsRequest(AccessToken $accessToken, string $region, $location_id, $status, $last_updated_after = null, $last_updated_before = null, $max_results = null, $next_token = null) : RequestInterface
    {
        // verify the required parameter 'location_id' is set
        if ($location_id === null || (is_array($location_id) && count($location_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $location_id when calling getShipments'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $status when calling getShipments'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if ($location_id instanceof \DateTimeInterface) {
            $location_id = ObjectSerializer::toString($location_id);
        }
        if (is_array($location_id)) {
            $location_id = ObjectSerializer::serializeCollection($location_id, '', true);
        }
        if ($location_id !== null) {
            $queryParams['locationId'] = $location_id;
        }
        // query params
        if ($status instanceof \DateTimeInterface) {
            $status = ObjectSerializer::toString($status);
        }
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }
        // query params
        if ($last_updated_after instanceof \DateTimeInterface) {
            $last_updated_after = ObjectSerializer::toString($last_updated_after);
        }
        if (is_array($last_updated_after)) {
            $last_updated_after = ObjectSerializer::serializeCollection($last_updated_after, '', true);
        }
        if ($last_updated_after !== null) {
            $queryParams['lastUpdatedAfter'] = $last_updated_after;
        }
        // query params
        if ($last_updated_before instanceof \DateTimeInterface) {
            $last_updated_before = ObjectSerializer::toString($last_updated_before);
        }
        if (is_array($last_updated_before)) {
            $last_updated_before = ObjectSerializer::serializeCollection($last_updated_before, '', true);
        }
        if ($last_updated_before !== null) {
            $queryParams['lastUpdatedBefore'] = $last_updated_before;
        }
        // query params
        if ($max_results instanceof \DateTimeInterface) {
            $max_results = ObjectSerializer::toString($max_results);
        }
        if (is_array($max_results)) {
            $max_results = ObjectSerializer::serializeCollection($max_results, '', true);
        }
        if ($max_results !== null) {
            $queryParams['maxResults'] = $max_results;
        }
        // query params
        if ($next_token instanceof \DateTimeInterface) {
            $next_token = ObjectSerializer::toString($next_token);
        }
        if (is_array($next_token)) {
            $next_token = ObjectSerializer::serializeCollection($next_token, '', true);
        }
        if ($next_token !== null) {
            $queryParams['nextToken'] = $next_token;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

}
