<?php

namespace MehrIt\AmazonSellingPartner\Api\ShipmentProcessingApi;

use MehrIt\AmazonSellingPartner\AccessToken;
use MehrIt\AmazonSellingPartner\Configuration;
use MehrIt\AmazonSellingPartner\Exception\ApiException;
use MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException;
use MehrIt\AmazonSellingPartner\HttpFactory;
use MehrIt\AmazonSellingPartner\HttpSignatureHeaders;
use MehrIt\AmazonSellingPartner\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Log\LoggerInterface;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh
 */
final class ExternalFulfillmentShipmentsSDK
{
    public const API_NAME = 'ExternalFulfillmentShipments';

    public const OPERATION_CREATEPACKAGES = 'createPackages';

    public const OPERATION_CREATEPACKAGES_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages';
    public const OPERATION_GENERATEINVOICE = 'generateInvoice';

    public const OPERATION_GENERATEINVOICE_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/invoice';
    public const OPERATION_GENERATESHIPLABEL = 'generateShipLabel';

    public const OPERATION_GENERATESHIPLABEL_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/shipLabel';
    public const OPERATION_PROCESSSHIPMENT = 'processShipment';

    public const OPERATION_PROCESSSHIPMENT_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}';
    public const OPERATION_RETRIEVEINVOICE = 'retrieveInvoice';

    public const OPERATION_RETRIEVEINVOICE_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/invoice';
    public const OPERATION_RETRIEVESHIPLABEL = 'retrieveShipLabel';

    public const OPERATION_RETRIEVESHIPLABEL_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/shipLabel';
    public const OPERATION_RETRIEVESHIPPINGOPTIONS = 'retrieveShippingOptions';

    public const OPERATION_RETRIEVESHIPPINGOPTIONS_PATH = '/externalFulfillment/shipments/2021-01-06/shippingOptions';
    public const OPERATION_UPDATEPACKAGE = 'updatePackage';

    public const OPERATION_UPDATEPACKAGE_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}';
    public const OPERATION_UPDATEPACKAGESTATUS = 'updatePackageStatus';

    public const OPERATION_UPDATEPACKAGESTATUS_PATH = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}';

    private ClientInterface $client;

    private HttpFactory $httpFactory;

    private Configuration $configuration;

    private LoggerInterface $logger;

    public function __construct(ClientInterface $client, HttpFactory $requestFactory, Configuration $configuration, LoggerInterface $logger)
    {
        $this->client = $client;
        $this->httpFactory = $requestFactory;
        $this->configuration = $configuration;
        $this->logger = $logger;
    }

    /**
     * Operation createPackages
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which package information is being provided. (required)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Packages $body The body of the request. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList
     */
    public function createPackages(AccessToken $accessToken, string $region, $shipment_id, $body)
    {
        $request = $this->createPackagesRequest($accessToken, $region, $shipment_id, $body);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'createPackages', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'createPackages')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'createPackages'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'createPackages',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'createPackages', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'createPackages')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'createPackages'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'createPackages',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList::class,
            []
        );
    }

    /**
     * Create request for operation 'createPackages'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which package information is being provided. (required)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Packages $body The body of the request. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function createPackagesRequest(AccessToken $accessToken, string $region, $shipment_id, $body) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling createPackages'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling createPackages'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation generateInvoice
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose invoice is to be generated and retrieved. (required)
     * @param string $package_id The id of the package whose invoice is to be generated and retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\InvoiceResponse
     */
    public function generateInvoice(AccessToken $accessToken, string $region, $shipment_id, $package_id)
    {
        $request = $this->generateInvoiceRequest($accessToken, $region, $shipment_id, $package_id);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'generateInvoice', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'generateInvoice')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'generateInvoice'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'generateInvoice',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'generateInvoice', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'generateInvoice')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'generateInvoice'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'generateInvoice',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\InvoiceResponse::class,
            []
        );
    }

    /**
     * Create request for operation 'generateInvoice'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose invoice is to be generated and retrieved. (required)
     * @param string $package_id The id of the package whose invoice is to be generated and retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function generateInvoiceRequest(AccessToken $accessToken, string $region, $shipment_id, $package_id) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateInvoice'
            );
        }
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling generateInvoice'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation generateShipLabel
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose ship-label is to be generated and retrieved. (required)
     * @param string $package_id The id of the package for which a ship-label is to be generated and retrieved. (required)
     * @param string $operation The operation which says it is generation or regeneration of label. (required)
     * @param string $shipping_option_id The id of the shippingOption for which a ship-label is to be generated and retrieved. (optional)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\TrackingDetails $body Contains shipping details for the case where shipping is not done by marketplace channel. (optional)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipLabelResponse
     */
    public function generateShipLabel(AccessToken $accessToken, string $region, $shipment_id, $package_id, $operation, $shipping_option_id = null, $body = null)
    {
        $request = $this->generateShipLabelRequest($accessToken, $region, $shipment_id, $package_id, $operation, $shipping_option_id, $body);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'generateShipLabel', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'generateShipLabel')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'generateShipLabel'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'generateShipLabel',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'generateShipLabel', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'generateShipLabel')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'generateShipLabel'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'generateShipLabel',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipLabelResponse::class,
            []
        );
    }

    /**
     * Create request for operation 'generateShipLabel'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose ship-label is to be generated and retrieved. (required)
     * @param string $package_id The id of the package for which a ship-label is to be generated and retrieved. (required)
     * @param string $operation The operation which says it is generation or regeneration of label. (required)
     * @param string $shipping_option_id The id of the shippingOption for which a ship-label is to be generated and retrieved. (optional)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\TrackingDetails $body Contains shipping details for the case where shipping is not done by marketplace channel. (optional)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function generateShipLabelRequest(AccessToken $accessToken, string $region, $shipment_id, $package_id, $operation, $shipping_option_id = null, $body = null) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling generateShipLabel'
            );
        }
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling generateShipLabel'
            );
        }
        // verify the required parameter 'operation' is set
        if ($operation === null || (is_array($operation) && count($operation) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $operation when calling generateShipLabel'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/shipLabel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if ($shipping_option_id instanceof \DateTimeInterface) {
            $shipping_option_id = ObjectSerializer::toString($shipping_option_id);
        }
        if (is_array($shipping_option_id)) {
            $shipping_option_id = ObjectSerializer::serializeCollection($shipping_option_id, '', true);
        }
        if ($shipping_option_id !== null) {
            $queryParams['shippingOptionId'] = $shipping_option_id;
        }
        // query params
        if ($operation instanceof \DateTimeInterface) {
            $operation = ObjectSerializer::toString($operation);
        }
        if (is_array($operation)) {
            $operation = ObjectSerializer::serializeCollection($operation, '', true);
        }
        if ($operation !== null) {
            $queryParams['operation'] = $operation;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation processShipment
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment which is to be confirmed for fulfillment. (required)
     * @param string $operation The status in which shipment should be moved. (required)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentAcknowledgementRequest $body The body of the request. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList
     */
    public function processShipment(AccessToken $accessToken, string $region, $shipment_id, $operation, $body)
    {
        $request = $this->processShipmentRequest($accessToken, $region, $shipment_id, $operation, $body);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'processShipment', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'processShipment')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'processShipment'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'processShipment',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'processShipment', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'processShipment')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'processShipment'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'processShipment',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList::class,
            []
        );
    }

    /**
     * Create request for operation 'processShipment'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment which is to be confirmed for fulfillment. (required)
     * @param string $operation The status in which shipment should be moved. (required)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipmentAcknowledgementRequest $body The body of the request. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function processShipmentRequest(AccessToken $accessToken, string $region, $shipment_id, $operation, $body) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling processShipment'
            );
        }
        // verify the required parameter 'operation' is set
        if ($operation === null || (is_array($operation) && count($operation) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $operation when calling processShipment'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling processShipment'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if ($operation instanceof \DateTimeInterface) {
            $operation = ObjectSerializer::toString($operation);
        }
        if (is_array($operation)) {
            $operation = ObjectSerializer::serializeCollection($operation, '', true);
        }
        if ($operation !== null) {
            $queryParams['operation'] = $operation;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation retrieveInvoice
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose invoice is to be retrieved. (required)
     * @param string $package_id The id of the package whose invoice is to be retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\InvoiceResponse
     */
    public function retrieveInvoice(AccessToken $accessToken, string $region, $shipment_id, $package_id)
    {
        $request = $this->retrieveInvoiceRequest($accessToken, $region, $shipment_id, $package_id);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'retrieveInvoice', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'retrieveInvoice')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'retrieveInvoice'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'retrieveInvoice',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'retrieveInvoice', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'retrieveInvoice')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'retrieveInvoice'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'retrieveInvoice',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\InvoiceResponse::class,
            []
        );
    }

    /**
     * Create request for operation 'retrieveInvoice'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose invoice is to be retrieved. (required)
     * @param string $package_id The id of the package whose invoice is to be retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function retrieveInvoiceRequest(AccessToken $accessToken, string $region, $shipment_id, $package_id) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling retrieveInvoice'
            );
        }
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling retrieveInvoice'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/invoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation retrieveShipLabel
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose ship-label is to be generated and retrieved. (required)
     * @param string $package_id The id of the package for which a ship-label is to be generated and retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipLabelResponse
     */
    public function retrieveShipLabel(AccessToken $accessToken, string $region, $shipment_id, $package_id)
    {
        $request = $this->retrieveShipLabelRequest($accessToken, $region, $shipment_id, $package_id);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'retrieveShipLabel', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'retrieveShipLabel')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'retrieveShipLabel'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'retrieveShipLabel',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'retrieveShipLabel', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'retrieveShipLabel')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'retrieveShipLabel'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'retrieveShipLabel',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShipLabelResponse::class,
            []
        );
    }

    /**
     * Create request for operation 'retrieveShipLabel'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment whose ship-label is to be generated and retrieved. (required)
     * @param string $package_id The id of the package for which a ship-label is to be generated and retrieved. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function retrieveShipLabelRequest(AccessToken $accessToken, string $region, $shipment_id, $package_id) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling retrieveShipLabel'
            );
        }
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling retrieveShipLabel'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}/shipLabel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation retrieveShippingOptions
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which available shipping option needs to be fetched. (required)
     * @param string $package_id The id of the package for which available shipping option needs to be fetched. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShippingOptionsResponse
     */
    public function retrieveShippingOptions(AccessToken $accessToken, string $region, $shipment_id, $package_id)
    {
        $request = $this->retrieveShippingOptionsRequest($accessToken, $region, $shipment_id, $package_id);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'retrieveShippingOptions', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'retrieveShippingOptions')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'retrieveShippingOptions'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'retrieveShippingOptions',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'retrieveShippingOptions', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'retrieveShippingOptions')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'retrieveShippingOptions'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'retrieveShippingOptions',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ShippingOptionsResponse::class,
            []
        );
    }

    /**
     * Create request for operation 'retrieveShippingOptions'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which available shipping option needs to be fetched. (required)
     * @param string $package_id The id of the package for which available shipping option needs to be fetched. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function retrieveShippingOptionsRequest(AccessToken $accessToken, string $region, $shipment_id, $package_id) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling retrieveShippingOptions'
            );
        }
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling retrieveShippingOptions'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shippingOptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if ($shipment_id instanceof \DateTimeInterface) {
            $shipment_id = ObjectSerializer::toString($shipment_id);
        }
        if (is_array($shipment_id)) {
            $shipment_id = ObjectSerializer::serializeCollection($shipment_id, '', true);
        }
        if ($shipment_id !== null) {
            $queryParams['shipmentId'] = $shipment_id;
        }
        // query params
        if ($package_id instanceof \DateTimeInterface) {
            $package_id = ObjectSerializer::toString($package_id);
        }
        if (is_array($package_id)) {
            $package_id = ObjectSerializer::serializeCollection($package_id, '', true);
        }
        if ($package_id !== null) {
            $queryParams['packageId'] = $package_id;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }




        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation updatePackage
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which package information is being updated. (required)
     * @param string $package_id The id of the shipment for which package information is being updated. (required)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Package $body The body of the request. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList
     */
    public function updatePackage(AccessToken $accessToken, string $region, $shipment_id, $package_id, $body)
    {
        $request = $this->updatePackageRequest($accessToken, $region, $shipment_id, $package_id, $body);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'updatePackage', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'updatePackage')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'updatePackage'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'updatePackage',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'updatePackage', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'updatePackage')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'updatePackage'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'updatePackage',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList::class,
            []
        );
    }

    /**
     * Create request for operation 'updatePackage'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which package information is being updated. (required)
     * @param string $package_id The id of the shipment for which package information is being updated. (required)
     * @param \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\Package $body The body of the request. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function updatePackageRequest(AccessToken $accessToken, string $region, $shipment_id, $package_id, $body) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updatePackage'
            );
        }
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling updatePackage'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling updatePackage'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PUT',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation updatePackageStatus
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which package information is being updated. (required)
     * @param string $package_id The id of the shipment for which package information is being updated. (required)
     * @param string $status The status of the package. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\ApiException on non-2xx response
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList
     */
    public function updatePackageStatus(AccessToken $accessToken, string $region, $shipment_id, $package_id, $status)
    {
        $request = $this->updatePackageStatusRequest($accessToken, $region, $shipment_id, $package_id, $status);

        $this->configuration->extensions()->preRequest('ExternalFulfillmentShipments', 'updatePackageStatus', $request);

        try {
            $correlationId = \uuid_create(UUID_TYPE_RANDOM);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'updatePackageStatus')) {

                $sanitizedRequest = $request;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'updatePackageStatus'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'updatePackageStatus',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('ExternalFulfillmentShipments', 'updatePackageStatus', $request, $response);

            if ($this->configuration->loggingEnabled('ExternalFulfillmentShipments', 'updatePackageStatus')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('ExternalFulfillmentShipments', 'updatePackageStatus'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'ExternalFulfillmentShipments',
                        'operation' => 'updatePackageStatus',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            \MehrIt\AmazonSellingPartner\Model\ExternalFulfillmentShipments\ErrorList::class,
            []
        );
    }

    /**
     * Create request for operation 'updatePackageStatus'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id The id of the shipment for which package information is being updated. (required)
     * @param string $package_id The id of the shipment for which package information is being updated. (required)
     * @param string $status The status of the package. (required)
     *
     * @throws \MehrIt\AmazonSellingPartner\Exception\InvalidArgumentException
     * @return RequestInterface
     */
    public function updatePackageStatusRequest(AccessToken $accessToken, string $region, $shipment_id, $package_id, $status) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling updatePackageStatus'
            );
        }
        // verify the required parameter 'package_id' is set
        if ($package_id === null || (is_array($package_id) && count($package_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_id when calling updatePackageStatus'
            );
        }
        // verify the required parameter 'status' is set
        if ($status === null || (is_array($status) && count($status) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $status when calling updatePackageStatus'
            );
        }

        $resourcePath = '/externalFulfillment/shipments/2021-01-06/shipments/{shipmentId}/packages/{packageId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if ($status instanceof \DateTimeInterface) {
            $status = ObjectSerializer::toString($status);
        }
        if (is_array($status)) {
            $status = ObjectSerializer::serializeCollection($status, '', true);
        }
        if ($status !== null) {
            $queryParams['status'] = $status;
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }


        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($package_id !== null) {
            $resourcePath = str_replace(
                '{' . 'packageId' . '}',
                ObjectSerializer::toPathValue($package_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PATCH',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

}
